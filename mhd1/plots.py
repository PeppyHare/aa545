"""Various methods used to visualize the data generated by MHDModel."""
import os

from matplotlib import pyplot as plt
from matplotlib import animation
import matplotlib.image as mpimg
import numpy as np
import tables

from mhd1.models import MHDModel
from mhd1.utils import save_plot


def plot_initial_distribution_all_axes(m: MHDModel):
    c = m.c
    fig, (
        (ax_rho_xy, ax_rho_yz, ax_e_xy, ax_e_yz),
        (ax_vx_xy, ax_vx_yz, ax_bx_xy, ax_bx_yz),
        (ax_vy_xy, ax_vy_xz, ax_by_xy, ax_by_xz),
        (ax_vz_xy, ax_vz_yz, ax_bz_xy, ax_bz_yz),
    ) = plt.subplots(
        ncols=4, nrows=4, constrained_layout=True, figsize=(12, 10)
    )
    fig.suptitle("Initial Configuration")
    ax_rho_xy.set_xlabel(r"$x$")
    ax_rho_xy.set_ylabel(r"$y$")
    ax_rho_xy.set_title(r"$\rho$")
    ax_rho_yz.set_xlabel(r"$y$")
    ax_rho_yz.set_ylabel(r"$z$")
    ax_rho_yz.set_title(r"$\rho$")
    ax_e_xy.set_xlabel(r"$x$")
    ax_e_xy.set_ylabel(r"$y$")
    ax_e_xy.set_title(r"Energy density")
    ax_e_yz.set_xlabel(r"$y$")
    ax_e_yz.set_ylabel(r"$z$")
    ax_e_yz.set_title(r"Energy density")
    ax_vx_xy.set_xlabel(r"$x$")
    ax_vx_xy.set_ylabel(r"$y$")
    ax_vx_xy.set_title(r"$\rho v_x$")
    ax_vx_yz.set_xlabel(r"$y$")
    ax_vx_yz.set_ylabel(r"$z$")
    ax_vx_yz.set_title(r"$\rho v_x$")
    ax_vy_xy.set_xlabel(r"$x$")
    ax_vy_xy.set_ylabel(r"$y$")
    ax_vy_xy.set_title(r"$\rho v_y$")
    ax_vy_xz.set_xlabel(r"$x$")
    ax_vy_xz.set_ylabel(r"$z$")
    ax_vy_xz.set_title(r"$\rho v_y$")
    ax_vz_xy.set_xlabel(r"$x$")
    ax_vz_xy.set_ylabel(r"$y$")
    ax_vz_xy.set_title(r"$\rho v_z$")
    ax_vz_yz.set_xlabel(r"$y$")
    ax_vz_yz.set_ylabel(r"$z$")
    ax_vz_yz.set_title(r"$\rho v_z$")
    ax_bx_xy.set_xlabel(r"$x$")
    ax_bx_xy.set_ylabel(r"$y$")
    ax_bx_xy.set_title(r"$B_x$")
    ax_bx_yz.set_xlabel(r"$y$")
    ax_bx_yz.set_ylabel(r"$z$")
    ax_bx_yz.set_title(r"$B_x$")
    ax_by_xy.set_xlabel(r"$x$")
    ax_by_xy.set_ylabel(r"$y$")
    ax_by_xy.set_title(r"$B_y$")
    ax_by_xz.set_xlabel(r"$x$")
    ax_by_xz.set_ylabel(r"$z$")
    ax_by_xz.set_title(r"$B_y$")
    ax_bz_xy.set_xlabel(r"$x$")
    ax_bz_xy.set_ylabel(r"$y$")
    ax_bz_xy.set_title(r"$B_z$")
    ax_bz_yz.set_xlabel(r"$y$")
    ax_bz_yz.set_ylabel(r"$z$")
    ax_bz_yz.set_title(r"$B_z$")
    i0 = int(c.Mx / 2)  # midplane of the x-axis
    j0 = int(c.My / 2)  # midplane of the y-axis
    k0 = int(c.Mz / 2)  # midplane of the z-axis
    vlim_rho = (np.min(c.initial_Q[0]) - 0.1, np.max(c.initial_Q[0]) + 0.1)
    vlim_vx = (np.min(c.initial_Q[1]) - 0.1, np.max(c.initial_Q[1]) + 0.1)
    vlim_vy = (np.min(c.initial_Q[2]) - 0.1, np.max(c.initial_Q[2]) + 0.1)
    vlim_vz = (np.min(c.initial_Q[3]) - 0.1, np.max(c.initial_Q[3]) + 0.1)
    vlim_bx = (np.min(c.initial_Q[4]) - 0.1, np.max(c.initial_Q[4]) + 0.1)
    vlim_by = (np.min(c.initial_Q[5]) - 0.1, np.max(c.initial_Q[5]) + 0.1)
    vlim_bz = (np.min(c.initial_Q[6]) - 0.1, np.max(c.initial_Q[6]) + 0.1)
    vlim_e = (np.min(c.initial_Q[7]) - 0.1, np.max(c.initial_Q[7]) + 0.1)
    rho_xy = ax_rho_xy.imshow(
        c.initial_Q[0, :, :, k0],
        origin="lower",
        vmin=vlim_rho[0],
        vmax=vlim_rho[1],
    )
    rho_yz = ax_rho_yz.imshow(
        c.initial_Q[0, i0, :, :],
        origin="lower",
        vmin=vlim_rho[0],
        vmax=vlim_rho[1],
    )
    vx_xy = ax_vx_xy.imshow(
        c.initial_Q[1, :, :, k0] / c.initial_Q[0, :, :, k0],
        origin="lower",
        vmin=vlim_vx[0],
        vmax=vlim_vx[1],
    )
    vx_yz = ax_vx_yz.imshow(
        c.initial_Q[1, i0, :, :] / c.initial_Q[0, i0, :, :],
        origin="lower",
        vmin=vlim_vx[0],
        vmax=vlim_vx[1],
    )
    vy_xy = ax_vy_xy.imshow(
        c.initial_Q[2, :, :, k0] / c.initial_Q[0, :, :, k0],
        origin="lower",
        vmin=vlim_vy[0],
        vmax=vlim_vy[1],
    )
    vy_xz = ax_vy_xz.imshow(
        c.initial_Q[2, :, j0, :] / c.initial_Q[0, :, j0, :],
        origin="lower",
        vmin=vlim_vy[0],
        vmax=vlim_vy[1],
    )
    vz_xy = ax_vz_xy.imshow(
        c.initial_Q[3, :, :, k0] / c.initial_Q[0, :, :, k0],
        origin="lower",
        vmin=vlim_vz[0],
        vmax=vlim_vz[1],
    )
    vz_yz = ax_vz_yz.imshow(
        c.initial_Q[3, i0, :, :] / c.initial_Q[0, i0, :, :],
        origin="lower",
        vmin=vlim_vz[0],
        vmax=vlim_vz[1],
    )
    bx_xy = ax_bx_xy.imshow(
        c.initial_Q[4, :, :, k0],
        origin="lower",
        vmin=vlim_bx[0],
        vmax=vlim_bx[1],
    )
    bx_yz = ax_bx_yz.imshow(
        c.initial_Q[4, i0, :, :],
        origin="lower",
        vmin=vlim_bx[0],
        vmax=vlim_bx[1],
    )
    by_xy = ax_by_xy.imshow(
        c.initial_Q[5, :, :, k0],
        origin="lower",
        vmin=vlim_by[0],
        vmax=vlim_by[1],
    )
    by_xz = ax_by_xz.imshow(
        c.initial_Q[5, :, j0, :],
        origin="lower",
        vmin=vlim_by[0],
        vmax=vlim_by[1],
    )
    bz_xy = ax_bz_xy.imshow(
        c.initial_Q[6, :, :, k0],
        origin="lower",
        vmin=vlim_bz[0],
        vmax=vlim_bz[1],
    )
    bz_yz = ax_bz_yz.imshow(
        c.initial_Q[6, i0, :, :],
        origin="lower",
        vmin=vlim_bz[0],
        vmax=vlim_bz[1],
    )
    e_xy = ax_e_xy.imshow(
        c.initial_Q[7, :, :, k0], origin="lower", vmin=vlim_e[0], vmax=vlim_e[1]
    )
    e_yz = ax_e_yz.imshow(
        c.initial_Q[7, i0, :, :], origin="lower", vmin=vlim_e[0], vmax=vlim_e[1]
    )
    plt.colorbar(rho_yz, ax=[ax_rho_xy, ax_rho_yz])
    plt.colorbar(e_yz, ax=[ax_e_xy, ax_e_yz])
    plt.colorbar(vx_yz, ax=[ax_vx_xy, ax_vx_yz])
    plt.colorbar(vy_xz, ax=[ax_vy_xy, ax_vy_xz])
    plt.colorbar(vz_yz, ax=[ax_vz_xy, ax_vz_yz])
    plt.colorbar(bx_yz, ax=[ax_bx_xy, ax_bx_yz])
    plt.colorbar(by_xz, ax=[ax_by_xy, ax_by_xz])
    plt.colorbar(bz_yz, ax=[ax_bz_xy, ax_bz_yz])
    save_plot("initial_configuration.pdf")
    mng = plt.get_current_fig_manager()
    mng.window.state("zoomed")
    plt.show()


def plot_initial_distribution_xy(m: MHDModel):
    """Plot initial configuration using pyplot.

    Only plot x-y distributions, assuming a periodic domain in z.
    """
    c = m.c
    fig = plt.figure(figsize=(10, 10))
    fig.suptitle("Initial Conditions")

    k2 = int(c.Mz / 2)

    # Plot initial density distribution in x-y plane
    ax_rho_xy = fig.add_subplot(331)
    ct = ax_rho_xy.imshow(
        c.initial_Q[0, :, :, k2],
        origin="lower",
    )
    ax_rho_xy.set_ylabel(r"$y$")
    ax_rho_xy.set_xlabel(r"$x$")
    ax_rho_xy.set_title(r"$\rho$")
    plt.colorbar(ct, ax=ax_rho_xy)

    # Plot initial energy distribution in x-y plane
    ax_e_xy = fig.add_subplot(333)
    ct = ax_e_xy.imshow(
        c.initial_Q[7, :, :, k2],
        origin="lower",
    )
    ax_e_xy.set_ylabel(r"$y$")
    ax_e_xy.set_xlabel(r"$x$")
    ax_e_xy.set_title("Energy")
    plt.colorbar(ct, ax=ax_e_xy)

    # Plot initial momentum distributions in x-y plane
    vmin = np.min(c.initial_Q[1:4, :, :, :])
    vmax = np.max(c.initial_Q[1:4, :, :, :])
    ax_vx_xy = fig.add_subplot(334)
    ct = ax_vx_xy.imshow(
        c.initial_Q[1, :, :, k2], origin="lower", vmin=vmin, vmax=vmax
    )
    ax_vx_xy.set_ylabel(r"$y$")
    ax_vx_xy.set_xlabel(r"$x$")
    ax_vx_xy.set_title(r"$\rho v_x$")
    plt.colorbar(ct, ax=ax_vx_xy)

    ax_vy_xy = fig.add_subplot(335)
    ct = ax_vy_xy.imshow(
        c.initial_Q[2, :, :, k2], origin="lower", vmin=vmin, vmax=vmax
    )
    ax_vy_xy.set_ylabel(r"$y$")
    ax_vy_xy.set_xlabel(r"$x$")
    ax_vy_xy.set_title(r"$\rho v_y$")
    plt.colorbar(ct, ax=ax_vy_xy)

    ax_vz_xy = fig.add_subplot(336)
    ct = ax_vz_xy.imshow(
        c.initial_Q[3, :, :, k2], origin="lower", vmin=vmin, vmax=vmax
    )
    ax_vz_xy.set_ylabel(r"$y$")
    ax_vz_xy.set_xlabel(r"$x$")
    ax_vz_xy.set_title(r"$\rho v_z$")
    plt.colorbar(ct, ax=ax_vz_xy)

    # Plot initial magnetic field in x-y plane
    vmin = np.min(c.initial_Q[4:7, :, :, :])
    vmax = np.max(c.initial_Q[4:7, :, :, :])
    ax_bx_xy = fig.add_subplot(337)
    ct = ax_bx_xy.imshow(
        c.initial_Q[4, :, :, k2], origin="lower", vmin=vmin, vmax=vmax
    )
    ax_bx_xy.set_ylabel(r"$y$")
    ax_bx_xy.set_xlabel(r"$x$")
    ax_bx_xy.set_title(r"$B_x$")

    ax_by_xy = fig.add_subplot(338)
    ct = ax_by_xy.imshow(
        c.initial_Q[5, :, :, k2], origin="lower", vmin=vmin, vmax=vmax
    )
    ax_by_xy.set_ylabel(r"$y$")
    ax_by_xy.set_xlabel(r"$x$")
    ax_by_xy.set_title(r"$B_y$")

    ax_bz_xy = fig.add_subplot(339)
    ct = ax_bz_xy.imshow(
        c.initial_Q[6, :, :, k2], origin="lower", vmin=vmin, vmax=vmax
    )
    ax_bz_xy.set_ylabel(r"$y$")
    ax_bz_xy.set_xlabel(r"$x$")
    ax_bz_xy.set_title(r"$B_z$")
    plt.colorbar(ct, ax=[ax_bx_xy, ax_by_xy, ax_bz_xy])

    fig2 = plt.figure()
    ax_b_xy = fig2.add_subplot(111)
    x = c.x_i
    y = c.y_j
    X, Y = np.meshgrid(x, y)
    U = c.initial_Q[4, :, :, k2]
    V = c.initial_Q[5, :, :, k2]
    ax_b_xy.quiver(X, Y, V, U, angles="xy", color="tab:cyan")
    ax_b_xy.set_xlabel(r"$x$")
    ax_b_xy.set_ylabel(r"$y$")
    plt.title(r"$B_\theta$")
    mng = plt.get_current_fig_manager()
    mng.window.state("zoomed")
    plt.show()


def shock_snapshots(m: MHDModel, n=0):
    c = m.c
    d = m.d
    fig, ((ax_rho, ax_t), (ax_u, ax_v), (ax_by, ax_e)) = plt.subplots(
        ncols=2, nrows=3, constrained_layout=True, figsize=(6, 8)
    )
    ax_rho.set_title(r"$\rho$")
    ax_u.set_title(r"$\rho v_x$")
    ax_v.set_title(r"$\rho v_y$")
    ax_by.set_title(r"$B_y$")
    ax_e.set_title(r"$e$")
    ax_rho.set_xlabel(r"$x$")
    ax_u.set_xlabel(r"$x$")
    ax_v.set_xlabel(r"$x$")
    ax_by.set_xlabel(r"$x$")
    ax_e.set_xlabel(r"$x$")
    ax_t.set_visible(False)
    x = c.x_i
    dt = c.dt
    subsample_ratio = c.subsample_ratio
    with tables.open_file(d.h5_filename, mode="r") as f:
        j0 = int((f.root.rho.shape[2] - 1) / 2)
        k0 = int((f.root.rho.shape[3] - 1) / 2)
        (pt_rho,) = ax_rho.plot(
            x,
            f.root.rho[n, :, j0, k0],
            color="tab:green",
        )
        (pt_u,) = ax_u.plot(
            x,
            f.root.mx[n, :, j0, k0] / f.root.rho[n, :, j0, k0],
            color="tab:orange",
        )
        (pt_v,) = ax_v.plot(
            x,
            f.root.my[n, :, j0, k0] / f.root.rho[n, :, j0, k0],
            color="tab:cyan",
        )
        (pt_by,) = ax_by.plot(
            x,
            f.root.by[n, :, j0, k0],
            color="tab:purple",
        )
        (pt_e,) = ax_e.plot(
            x,
            f.root.e[n, :, j0, k0],
            color="tab:red",
        )
        current_time = n * dt * subsample_ratio
        fig.suptitle(f"Brio-Wu Shock: t = {current_time:.2f}")

        rho = f.root.rho[:, :, j0, k0]
        u = f.root.mx[:, :, j0, k0] / f.root.rho[:, :, j0, k0]
        v = f.root.my[:, :, j0, k0] / f.root.rho[:, :, j0, k0]
        by = f.root.by[:, :, j0, k0]
        e = f.root.e[:, :, j0, k0]

    save_plot(f"shock_snapshots_n_{n}.pdf")
    plt.show()


def plot_shock(m: MHDModel):
    c = m.c
    d = m.d
    fig, ((ax_rho, ax_t), (ax_u, ax_v), (ax_by, ax_e)) = plt.subplots(
        ncols=2, nrows=3, constrained_layout=True, figsize=(6, 8)
    )
    ax_rho.set_title(r"$\rho$")
    ax_u.set_title(r"$\rho v_x$")
    ax_v.set_title(r"$\rho v_y$")
    ax_by.set_title(r"$B_y$")
    ax_e.set_title(r"$e$")
    ax_rho.set_xlabel(r"$x$")
    ax_u.set_xlabel(r"$x$")
    ax_v.set_xlabel(r"$x$")
    ax_by.set_xlabel(r"$x$")
    ax_e.set_xlabel(r"$x$")
    x = c.x_i
    with tables.open_file(d.h5_filename, mode="r") as f:
        j0 = int((f.root.rho.shape[2] - 1) / 2)
        k0 = int((f.root.rho.shape[3] - 1) / 2)
        (pt_rho,) = ax_rho.plot(
            x, f.root.rho[0, :, j0, k0], color="tab:green", animated=True
        )
        (pt_u,) = ax_u.plot(
            x,
            f.root.mx[0, :, j0, k0] / f.root.rho[0, :, j0, k0],
            color="tab:orange",
            animated=True,
        )
        (pt_v,) = ax_v.plot(
            x,
            f.root.my[0, :, j0, k0] / f.root.rho[0, :, j0, k0],
            color="tab:cyan",
            animated=True,
        )
        (pt_by,) = ax_by.plot(
            x, f.root.by[0, :, j0, k0], color="tab:purple", animated=True
        )
        (pt_e,) = ax_e.plot(
            x, f.root.e[0, :, j0, k0], color="tab:red", animated=True
        )
        time_text = ax_t.text(0.5, 0.5, "", transform=ax_t.transAxes)

        rho = f.root.rho[:, :, j0, k0]
        u = f.root.mx[:, :, j0, k0] / f.root.rho[:, :, j0, k0]
        v = f.root.my[:, :, j0, k0] / f.root.rho[:, :, j0, k0]
        by = f.root.by[:, :, j0, k0]
        e = f.root.e[:, :, j0, k0]

    ax_rho.set_ylim(np.min(rho), np.max(rho))
    ax_u.set_ylim(np.min(u), np.max(u))
    ax_v.set_ylim(np.min(v), np.max(v))
    ax_by.set_ylim(np.min(by), np.max(by))
    ax_e.set_ylim(np.min(e), np.max(e))

    dt = c.dt
    subsample_ratio = c.subsample_ratio

    def animate(n):
        current_time = n * dt * subsample_ratio
        time_text.set_text(f"t = {current_time:.2f}")
        pt_rho.set_data(x, rho[n])
        pt_u.set_data(x, u[n])
        pt_v.set_data(x, v[n])
        pt_by.set_data(x, by[n])
        pt_e.set_data(x, e[n])
        return (pt_rho, pt_u, pt_v, pt_by, pt_e, time_text)

    ani = animation.FuncAnimation(
        fig,
        animate,
        frames=rho.shape[0],
        blit=True,
        interval=100,
        repeat=True,
    )

    fig2 = plt.figure(figsize=(6, 8))
    img = mpimg.imread(os.path.join("saved_data", "mhd1", "brio-wu-shock.png"))
    plt.imshow(img)
    plt.show()
    plt.show()


def animate_mhd(m: MHDModel, plot_title="Animation", repeat: bool = True):
    """Animate the distribution over time, viewed from two orthogonal slices."""
    if not m.has_run:
        m.run()
    c = m.c
    d = m.d
    frames = []
    fig, (
        (ax_rho_xy, ax_rho_yz, ax_e_xy, ax_e_yz),
        (ax_vx_xy, ax_vx_yz, ax_vy_xy, ax_vy_yz),
        (ax_vz_xy, ax_vz_yz, ax_bx_xy, ax_bx_yz),
        (ax_by_xy, ax_by_yz, ax_bz_xy, ax_bz_yz),
    ) = plt.subplots(
        ncols=4, nrows=4, constrained_layout=True, figsize=(12, 10)
    )
    ax_rho_xy.set_xlabel(r"$x$")
    ax_rho_xy.set_ylabel(r"$y$")
    ax_rho_xy.set_title(r"$\rho$")
    ax_rho_yz.set_xlabel(r"$y$")
    ax_rho_yz.set_ylabel(r"$z$")
    ax_rho_yz.set_title(r"$\rho$")
    ax_e_xy.set_xlabel(r"$x$")
    ax_e_xy.set_ylabel(r"$y$")
    ax_e_xy.set_title(r"Energy density")
    ax_e_yz.set_xlabel(r"$y$")
    ax_e_yz.set_ylabel(r"$z$")
    ax_e_yz.set_title(r"Energy density")
    ax_vx_xy.set_xlabel(r"$x$")
    ax_vx_xy.set_ylabel(r"$y$")
    ax_vx_xy.set_title(r"$\rho v_x$")
    ax_vx_yz.set_xlabel(r"$y$")
    ax_vx_yz.set_ylabel(r"$z$")
    ax_vx_yz.set_title(r"$\rho v_x$")
    ax_vy_xy.set_xlabel(r"$x$")
    ax_vy_xy.set_ylabel(r"$y$")
    ax_vy_xy.set_title(r"$\rho v_y$")
    ax_vy_yz.set_xlabel(r"$y$")
    ax_vy_yz.set_ylabel(r"$z$")
    ax_vy_yz.set_title(r"$\rho v_y$")
    ax_vz_xy.set_xlabel(r"$x$")
    ax_vz_xy.set_ylabel(r"$y$")
    ax_vz_xy.set_title(r"$\rho v_z$")
    ax_vz_yz.set_xlabel(r"$y$")
    ax_vz_yz.set_ylabel(r"$z$")
    ax_vz_yz.set_title(r"$\rho v_z$")
    ax_bx_xy.set_xlabel(r"$x$")
    ax_bx_xy.set_ylabel(r"$y$")
    ax_bx_xy.set_title(r"$B_x$")
    ax_bx_yz.set_xlabel(r"$y$")
    ax_bx_yz.set_ylabel(r"$z$")
    ax_bx_yz.set_title(r"$B_x$")
    ax_by_xy.set_xlabel(r"$x$")
    ax_by_xy.set_ylabel(r"$y$")
    ax_by_xy.set_title(r"$B_y$")
    ax_by_yz.set_xlabel(r"$y$")
    ax_by_yz.set_ylabel(r"$z$")
    ax_by_yz.set_title(r"$B_y$")
    ax_bz_xy.set_xlabel(r"$x$")
    ax_bz_xy.set_ylabel(r"$y$")
    ax_bz_xy.set_title(r"$B_z$")
    ax_bz_yz.set_xlabel(r"$y$")
    ax_bz_yz.set_ylabel(r"$z$")
    ax_bz_yz.set_title(r"$B_z$")
    i0 = int(c.Mx / 2)  # midplane of the x-axis
    k0 = int(c.Mz / 2)  # midplane of the z-axis
    with tables.open_file(d.h5_filename, mode="r") as f:
        dt = c.dt
        subsample_ratio = c.subsample_ratio
        for n in range(f.root.rho.shape[0]):
            # for n in range(7, 8):

            rho_xy = ax_rho_xy.imshow(
                f.root.rho[n, :, :, k0], origin="lower", animated=True
            )
            rho_yz = ax_rho_yz.imshow(
                f.root.rho[n, i0, :, :], origin="lower", animated=True
            )
            vx_xy = ax_vx_xy.imshow(
                f.root.mx[n, :, :, k0], origin="lower", animated=True
            )
            vx_yz = ax_vx_yz.imshow(
                f.root.mx[n, i0, :, :], origin="lower", animated=True
            )
            vy_xy = ax_vy_xy.imshow(
                f.root.my[n, :, :, k0], origin="lower", animated=True
            )
            vy_yz = ax_vy_yz.imshow(
                f.root.my[n, i0, :, :], origin="lower", animated=True
            )
            vz_xy = ax_vz_xy.imshow(
                f.root.mz[n, :, :, k0], origin="lower", animated=True
            )
            vz_yz = ax_vz_yz.imshow(
                f.root.mz[n, i0, :, :], origin="lower", animated=True
            )
            bx_xy = ax_bx_xy.imshow(
                f.root.bx[n, :, :, k0], origin="lower", animated=True
            )
            bx_yz = ax_bx_yz.imshow(
                f.root.bx[n, i0, :, :], origin="lower", animated=True
            )
            by_xy = ax_by_xy.imshow(
                f.root.by[n, :, :, k0], origin="lower", animated=True
            )
            by_yz = ax_by_yz.imshow(
                f.root.by[n, i0, :, :], origin="lower", animated=True
            )
            bz_xy = ax_bz_xy.imshow(
                f.root.bz[n, :, :, k0], origin="lower", animated=True
            )
            bz_yz = ax_bz_yz.imshow(
                f.root.bz[n, i0, :, :], origin="lower", animated=True
            )
            e_xy = ax_e_xy.imshow(
                f.root.e[n, :, :, k0], origin="lower", animated=True
            )
            e_yz = ax_e_yz.imshow(
                f.root.e[n, i0, :, :], origin="lower", animated=True
            )
            time_text = ax_rho_xy.text(
                0.15,
                0.95,
                f"t={n*dt*subsample_ratio:.3f}",
                transform=ax_rho_xy.transAxes,
                animated=True,
            )
            frames.append(
                [
                    rho_xy,
                    rho_yz,
                    e_xy,
                    e_yz,
                    vx_xy,
                    vx_yz,
                    vy_xy,
                    vy_yz,
                    vz_xy,
                    vz_yz,
                    bx_xy,
                    bx_yz,
                    by_xy,
                    by_yz,
                    bz_xy,
                    bz_yz,
                    time_text,
                ]
            )
    ani = animation.ArtistAnimation(
        fig, frames, interval=2, blit=True, repeat_delay=1000
    )
    mng = plt.get_current_fig_manager()
    mng.window.state("zoomed")
    plt.show()


def mhd_snapshot(m: MHDModel, n: int):
    """Snapshot the solution."""
    if not m.has_run:
        m.run()
    c = m.c
    d = m.d
    fig, (
        (ax_rho_xy, ax_rho_yz, ax_e_xy, ax_e_yz),
        (ax_vx_xy, ax_vx_yz, ax_bx_xy, ax_bx_yz),
        (ax_vy_xy, ax_vy_xz, ax_by_xy, ax_by_xz),
        (ax_vz_xy, ax_vz_yz, ax_bz_xy, ax_bz_yz),
    ) = plt.subplots(
        ncols=4, nrows=4, constrained_layout=True, figsize=(12, 10)
    )
    dt = c.dt
    subsample_ratio = c.subsample_ratio
    current_time = n * dt * subsample_ratio
    fig.suptitle(f"Screw Pinch: t={current_time:.2f}")
    ax_rho_xy.set_xlabel(r"$x$")
    ax_rho_xy.set_ylabel(r"$y$")
    ax_rho_xy.set_title(r"$\rho$")
    ax_rho_yz.set_xlabel(r"$y$")
    ax_rho_yz.set_ylabel(r"$z$")
    ax_rho_yz.set_title(r"$\rho$")
    ax_e_xy.set_xlabel(r"$x$")
    ax_e_xy.set_ylabel(r"$y$")
    ax_e_xy.set_title(r"Energy density")
    ax_e_yz.set_xlabel(r"$y$")
    ax_e_yz.set_ylabel(r"$z$")
    ax_e_yz.set_title(r"Energy density")
    ax_vx_xy.set_xlabel(r"$x$")
    ax_vx_xy.set_ylabel(r"$y$")
    ax_vx_xy.set_title(r"$\rho v_x$")
    ax_vx_yz.set_xlabel(r"$y$")
    ax_vx_yz.set_ylabel(r"$z$")
    ax_vx_yz.set_title(r"$\rho v_x$")
    ax_vy_xy.set_xlabel(r"$x$")
    ax_vy_xy.set_ylabel(r"$y$")
    ax_vy_xy.set_title(r"$\rho v_y$")
    ax_vy_xz.set_xlabel(r"$x$")
    ax_vy_xz.set_ylabel(r"$z$")
    ax_vy_xz.set_title(r"$\rho v_y$")
    ax_vz_xy.set_xlabel(r"$x$")
    ax_vz_xy.set_ylabel(r"$y$")
    ax_vz_xy.set_title(r"$\rho v_z$")
    ax_vz_yz.set_xlabel(r"$y$")
    ax_vz_yz.set_ylabel(r"$z$")
    ax_vz_yz.set_title(r"$\rho v_z$")
    ax_bx_xy.set_xlabel(r"$x$")
    ax_bx_xy.set_ylabel(r"$y$")
    ax_bx_xy.set_title(r"$B_x$")
    ax_bx_yz.set_xlabel(r"$y$")
    ax_bx_yz.set_ylabel(r"$z$")
    ax_bx_yz.set_title(r"$B_x$")
    ax_by_xy.set_xlabel(r"$x$")
    ax_by_xy.set_ylabel(r"$y$")
    ax_by_xy.set_title(r"$B_y$")
    ax_by_xz.set_xlabel(r"$x$")
    ax_by_xz.set_ylabel(r"$z$")
    ax_by_xz.set_title(r"$B_y$")
    ax_bz_xy.set_xlabel(r"$x$")
    ax_bz_xy.set_ylabel(r"$y$")
    ax_bz_xy.set_title(r"$B_z$")
    ax_bz_yz.set_xlabel(r"$y$")
    ax_bz_yz.set_ylabel(r"$z$")
    ax_bz_yz.set_title(r"$B_z$")
    i0 = int(c.Mx / 2)  # midplane of the x-axis
    j0 = int(c.My / 2)  # midplane of the y-axis
    k0 = int(c.Mz / 2)  # midplane of the z-axis
    with tables.open_file(d.h5_filename, mode="r") as f:
        vlim_rho = (np.min(f.root.rho[n]) - 0.1, np.max(f.root.rho[n]) + 0.1)
        vlim_vx = (np.min(f.root.mx[n]) - 0.1, np.max(f.root.mx[n]) + 0.1)
        vlim_vy = (np.min(f.root.my[n]) - 0.1, np.max(f.root.my[n]) + 0.1)
        vlim_vz = (np.min(f.root.mz[n]) - 0.1, np.max(f.root.mz[n]) + 0.1)
        vlim_bx = (np.min(f.root.bx[n]) - 0.1, np.max(f.root.bx[n]) + 0.1)
        vlim_by = (np.min(f.root.by[n]) - 0.1, np.max(f.root.by[n]) + 0.1)
        vlim_bz = (np.min(f.root.bz[n]) - 0.1, np.max(f.root.bz[n]) + 0.1)
        vlim_e = (np.min(f.root.e[n]) - 0.1, np.max(f.root.e[n]) + 0.1)
        rho_xy = ax_rho_xy.imshow(
            f.root.rho[n, :, :, k0],
            origin="lower",
            vmin=vlim_rho[0],
            vmax=vlim_rho[1],
        )
        rho_yz = ax_rho_yz.imshow(
            f.root.rho[n, i0, :, :],
            origin="lower",
            vmin=vlim_rho[0],
            vmax=vlim_rho[1],
        )
        vx_xy = ax_vx_xy.imshow(
            f.root.mx[n, :, :, k0] / f.root.rho[n, :, :, k0],
            origin="lower",
            vmin=vlim_vx[0],
            vmax=vlim_vx[1],
        )
        vx_yz = ax_vx_yz.imshow(
            f.root.mx[n, i0, :, :] / f.root.rho[n, i0, :, :],
            origin="lower",
            vmin=vlim_vx[0],
            vmax=vlim_vx[1],
        )
        vy_xy = ax_vy_xy.imshow(
            f.root.my[n, :, :, k0] / f.root.rho[n, :, :, k0],
            origin="lower",
            vmin=vlim_vy[0],
            vmax=vlim_vy[1],
        )
        vy_xz = ax_vy_xz.imshow(
            f.root.my[n, :, j0, :] / f.root.rho[n, :, j0, :],
            origin="lower",
            vmin=vlim_vy[0],
            vmax=vlim_vy[1],
        )
        vz_xy = ax_vz_xy.imshow(
            f.root.mz[n, :, :, k0] / f.root.rho[n, :, :, k0],
            origin="lower",
            vmin=vlim_vz[0],
            vmax=vlim_vz[1],
        )
        vz_yz = ax_vz_yz.imshow(
            f.root.mz[n, i0, :, :] / f.root.rho[n, i0, :, :],
            origin="lower",
            vmin=vlim_vz[0],
            vmax=vlim_vz[1],
        )
        bx_xy = ax_bx_xy.imshow(
            f.root.bx[n, :, :, k0],
            origin="lower",
            vmin=vlim_bx[0],
            vmax=vlim_bx[1],
        )
        bx_yz = ax_bx_yz.imshow(
            f.root.bx[n, i0, :, :],
            origin="lower",
            vmin=vlim_bx[0],
            vmax=vlim_bx[1],
        )
        by_xy = ax_by_xy.imshow(
            f.root.by[n, :, :, k0],
            origin="lower",
            vmin=vlim_by[0],
            vmax=vlim_by[1],
        )
        by_xz = ax_by_xz.imshow(
            f.root.by[n, :, j0, :],
            origin="lower",
            vmin=vlim_by[0],
            vmax=vlim_by[1],
        )
        bz_xy = ax_bz_xy.imshow(
            f.root.bz[n, :, :, k0],
            origin="lower",
            vmin=vlim_bz[0],
            vmax=vlim_bz[1],
        )
        bz_yz = ax_bz_yz.imshow(
            f.root.bz[n, i0, :, :],
            origin="lower",
            vmin=vlim_bz[0],
            vmax=vlim_bz[1],
        )
        e_xy = ax_e_xy.imshow(
            f.root.e[n, :, :, k0],
            origin="lower",
            vmin=vlim_e[0],
            vmax=vlim_e[1],
        )
        e_yz = ax_e_yz.imshow(
            f.root.e[n, i0, :, :],
            origin="lower",
            vmin=vlim_e[0],
            vmax=vlim_e[1],
        )
        plt.colorbar(rho_yz, ax=[ax_rho_xy, ax_rho_yz])
        plt.colorbar(e_yz, ax=[ax_e_xy, ax_e_yz])
        plt.colorbar(vx_yz, ax=[ax_vx_xy, ax_vx_yz])
        plt.colorbar(vy_xz, ax=[ax_vy_xy, ax_vy_xz])
        plt.colorbar(vz_yz, ax=[ax_vz_xy, ax_vz_yz])
        plt.colorbar(bx_yz, ax=[ax_bx_xy, ax_bx_yz])
        plt.colorbar(by_xz, ax=[ax_by_xy, ax_by_xz])
        plt.colorbar(bz_yz, ax=[ax_bz_xy, ax_bz_yz])

    save_plot(f"mhd_snapshot_n_{n}.pdf")
    mng = plt.get_current_fig_manager()
    mng.window.state("zoomed")
    plt.show()
