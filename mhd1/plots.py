"""Various methods used to visualize the data generated by PicModel."""
# import datetime
# import os
# from functools import partial
# import math

from matplotlib import pyplot as plt
from matplotlib import animation
from mpl_toolkits.axes_grid1.axes_divider import make_axes_locatable

# from matplotlib.animation import FuncAnimation
# from matplotlib.animation import HTMLWriter
import numpy as np
import tables

from mhd1.models import MHDModel
from mhd1.utils import save_plot, create_folder


def plot_initial_distribution_all_axes(m: MHDModel):
    """Plot initial configuration using pyplot."""
    c = m.c
    fig = plt.figure(figsize=(10, 10))
    fig.suptitle("Initial distribution")

    x = c.x_i
    y = c.y_j
    z = c.z_k
    i2 = int(c.Mx / 2)
    j2 = int(c.My / 2)
    k2 = int(c.Mz / 2)

    # Plot initial density distribution
    vmin = np.min(c.initial_Q[0, :, :, :])
    vmin -= 0.2 * abs(vmin)
    vmax = np.max(c.initial_Q[0, :, :, :])
    vmax += 0.2 * abs(vmax)
    ax_rho_xy = fig.add_subplot(331)
    ct = ax_rho_xy.imshow(
        c.initial_Q[0, :, :, k2],
        origin="lower",
        vmin=vmin,
        vmax=vmax,
    )
    ax_rho_xy.set_ylabel(r"$y$")
    ax_rho_xy.set_xlabel(r"$x$")
    # plt.colorbar(ct, ax=ax_rho_xy)

    ax_rho_xz = fig.add_subplot(332)
    ct = ax_rho_xz.imshow(
        c.initial_Q[0, :, j2, :],
        origin="lower",
        vmin=vmin,
        vmax=vmax,
    )
    ax_rho_xz.set_ylabel(r"$z$")
    ax_rho_xz.set_xlabel(r"$x$")
    # plt.colorbar(ct, ax=ax_rho_xz)
    ax_rho_xz.set_title("Initial density")

    ax_rho_yz = fig.add_subplot(333)
    ct = ax_rho_yz.imshow(
        c.initial_Q[0, i2, :, :],
        origin="lower",
        vmin=vmin,
        vmax=vmax,
    )
    ax_rho_yz.set_ylabel(r"$z$")
    ax_rho_yz.set_xlabel(r"$y$")
    plt.colorbar(ct, ax=[ax_rho_xy, ax_rho_xz, ax_rho_yz])

    # Plot initial current distribution

    # fig2 = plt.figure()
    # ax_jz = fig2.add_subplot(111)
    # ax_jz.set_xlabel(r"$x$")
    # ax_jz.set_ylabel(r"$\rho v_z$")
    # ax_jz.plot(x, c.initial_Q[3, :, j2, k2])

    vmin = np.min(c.initial_Q[3, :, :, :])
    vmax = np.max(c.initial_Q[3, :, :, :])
    ax_p_xy = fig.add_subplot(334)
    ax_p_xy.imshow(
        c.initial_Q[3, :, :, k2],
        origin="lower",
        vmin=vmin,
        vmax=vmax,
    )
    ax_p_xy.set_xlabel(r"$x$")
    ax_p_xy.set_ylabel(r"$y$")
    ax_p_xy.set_title(r"$\rho v_z$")

    ax_p_yz = fig.add_subplot(335)
    ax_p_yz.imshow(
        c.initial_Q[3, i2, :, :],
        origin="lower",
        vmin=vmin,
        vmax=vmax,
    )
    ax_p_yz.set_xlabel(r"$y$")
    ax_p_yz.set_ylabel(r"$z$")
    ax_p_yz.set_title(r"$\rho v_z$")

    ax_p_xz = fig.add_subplot(336)
    ct = ax_p_xz.imshow(
        c.initial_Q[3, :, j2, :],
        origin="lower",
        vmin=vmin,
        vmax=vmax,
    )
    ax_p_xz.set_xlabel(r"$x$")
    ax_p_xz.set_ylabel(r"$z$")
    ax_p_xz.set_title(r"$\rho v_z$")
    plt.colorbar(ct, ax=[ax_p_xy, ax_p_yz, ax_p_xz])

    # Plot direction of initial magnetic field
    # ax_b_xy = fig.add_subplot(337)
    # X, Y = np.meshgrid(x, y)
    # U = c.initial_Q[4, :, :, k2]
    # V = c.initial_Q[5, :, :, k2]
    # ax_b_xy.quiver(X, Y, U, V)
    # ax_b_xy.set_xlabel(r"$x$")
    # ax_b_xy.set_ylabel(r"$y$")

    # ax_b_yz = fig.add_subplot(338)
    # X, Y = np.meshgrid(y, z)
    # U = c.initial_Q[5, i2, :, :]
    # V = c.initial_Q[6, i2, :, :]
    # ax_b_yz.streamplot(X, Y, U, V)
    # ax_b_yz.set_xlabel(r"$y$")
    # ax_b_yz.set_ylabel(r"$z$")
    # ax_b_yz.set_title(r"$B_y$, $B_z$")

    # ax_b_xz = fig.add_subplot(339)
    # X, Y = np.meshgrid(x, z)
    # U = c.initial_Q[4, :, j2, :]
    # V = c.initial_Q[6, :, j2, :]
    # ax_b_xz.streamplot(X, Y, U, V)
    # ax_b_xz.set_xlabel(r"$x$")
    # ax_b_xz.set_ylabel(r"$z$")
    # plt.tight_layout()
    plt.show()


def plot_initial_distribution_xy(m: MHDModel):
    """Plot initial configuration using pyplot.

    Only plot x-y distributions, assuming a periodic domain in z.
    """
    c = m.c
    fig = plt.figure(figsize=(10, 10))
    fig.suptitle("Initial distribution")

    k2 = int(c.Mz / 2)

    # Plot initial density distribution in x-y plane
    ax_rho_xy = fig.add_subplot(331)
    ct = ax_rho_xy.imshow(
        c.initial_Q[0, :, :, k2],
        origin="lower",
    )
    ax_rho_xy.set_ylabel(r"$y$")
    ax_rho_xy.set_xlabel(r"$x$")
    ax_rho_xy.set_title(r"$\rho$")
    plt.colorbar(ct, ax=ax_rho_xy)

    # Plot initial energy distribution in x-y plane
    ax_e_xy = fig.add_subplot(333)
    ct = ax_e_xy.imshow(
        c.initial_Q[7, :, :, k2],
        origin="lower",
    )
    ax_e_xy.set_ylabel(r"$y$")
    ax_e_xy.set_xlabel(r"$x$")
    ax_e_xy.set_title("Energy")
    plt.colorbar(ct, ax=ax_e_xy)

    # Plot initial momentum distributions in x-y plane
    vmin = np.min(c.initial_Q[1:4, :, :, :])
    vmax = np.max(c.initial_Q[1:4, :, :, :])
    ax_vx_xy = fig.add_subplot(334)
    ct = ax_vx_xy.imshow(
        c.initial_Q[1, :, :, k2], origin="lower", vmin=vmin, vmax=vmax
    )
    ax_vx_xy.set_ylabel(r"$y$")
    ax_vx_xy.set_xlabel(r"$x$")
    ax_vx_xy.set_title(r"$\rho v_x$")

    ax_vy_xy = fig.add_subplot(335)
    ct = ax_vy_xy.imshow(
        c.initial_Q[2, :, :, k2], origin="lower", vmin=vmin, vmax=vmax
    )
    ax_vy_xy.set_ylabel(r"$y$")
    ax_vy_xy.set_xlabel(r"$x$")
    ax_vy_xy.set_title(r"$\rho v_y$")

    ax_vz_xy = fig.add_subplot(336)
    ct = ax_vz_xy.imshow(
        c.initial_Q[3, :, :, k2], origin="lower", vmin=vmin, vmax=vmax
    )
    ax_vz_xy.set_ylabel(r"$y$")
    ax_vz_xy.set_xlabel(r"$x$")
    ax_vz_xy.set_title(r"$\rho v_z$")
    plt.colorbar(ct, ax=[ax_vx_xy, ax_vy_xy, ax_vz_xy])

    # Plot initial magnetic field in x-y plane
    vmin = np.min(c.initial_Q[4:7, :, :, :])
    vmax = np.max(c.initial_Q[4:7, :, :, :])
    ax_bx_xy = fig.add_subplot(337)
    ct = ax_bx_xy.imshow(
        c.initial_Q[4, :, :, k2], origin="lower", vmin=vmin, vmax=vmax
    )
    ax_bx_xy.set_ylabel(r"$y$")
    ax_bx_xy.set_xlabel(r"$x$")
    ax_bx_xy.set_title(r"$B_x$")

    ax_by_xy = fig.add_subplot(338)
    ct = ax_by_xy.imshow(
        c.initial_Q[5, :, :, k2], origin="lower", vmin=vmin, vmax=vmax
    )
    ax_by_xy.set_ylabel(r"$y$")
    ax_by_xy.set_xlabel(r"$x$")
    ax_by_xy.set_title(r"$B_y$")

    ax_bz_xy = fig.add_subplot(339)
    ct = ax_bz_xy.imshow(
        c.initial_Q[6, :, :, k2], origin="lower", vmin=vmin, vmax=vmax
    )
    ax_bz_xy.set_ylabel(r"$y$")
    ax_bz_xy.set_xlabel(r"$x$")
    ax_bz_xy.set_title(r"$B_z$")
    plt.colorbar(ct, ax=[ax_bx_xy, ax_by_xy, ax_bz_xy])

    # fig2 = plt.figure()
    # ax_b_xy = fig2.add_subplot(111)
    # x = c.x_i
    # y = c.y_j
    # X, Y = np.meshgrid(x, y)
    # U = c.initial_Q[4, :, :, k2]
    # V = c.initial_Q[5, :, :, k2]
    # ax_b_xy.quiver(X, Y, V, U, angles="xy", color="tab:cyan")
    # ax_b_xy.set_xlabel(r"$x$")
    # ax_b_xy.set_ylabel(r"$y$")
    # plt.title(r"$B_\theta$")

    plt.show()


# def _animate_frame(frame, q, X, Y, cf, time_text):
#     Z = q[frame, :, :]
#     cf = ax.contourf(X, Y, Z)
#     time_text.set_text(f"t = {frame}")
#     return (cf, time_text)


# x = c.x_i
# y = c.y_j
# X, Y = np.meshgrid(x, y)

# f = tables.open_file(m.d.h5_filename)
# # f = tables.open_file("saved_data/mhd1/2021-05-19_41829.177697_data.h5")
# mx = f.root.mx[:, :, :, 8]
# Z = mx[0, :, :]
# fig, ax = plt.subplots()
# ax.axis("equal")
# ax.axis("off")
# cf = ax.contourf(X, Y, Z)
# # get the mappable, the 1st and the 2nd are the x and y axes
# plt.colorbar(cf, ax=ax)
# time_text = plt.text(0.02, 0.95, "")
# animate = partial(_animate_frame, X=X, Y=Y, q=mx, cf=cf, time_text=time_text)
# animation = FuncAnimation(
#     fig, animate, frames=range(mx.shape[0]), interval=5, repeat=True
# )
# animation.save(
#     "test.mp4",
#     fps=24,
#     progress_callback=lambda i, n: print(f"Saving frame {i} of {n}"),
# )
# plt.show()


def animate_mhd(m: MHDModel, plot_title="Animation", repeat: bool = True):
    """Animate the distribution over time, viewed from two orthogonal slices."""
    if not m.has_run:
        m.run()
    c = m.c
    d = m.d
    frames = []
    fig, (
        (ax_rho_xy, ax_rho_yz, ax_e_xy, ax_e_yz),
        (ax_vx_xy, ax_vx_yz, ax_vy_xy, ax_vy_yz),
        (ax_vz_xy, ax_vz_yz, ax_bx_xy, ax_bx_yz),
        (ax_by_xy, ax_by_yz, ax_bz_xy, ax_bz_yz),
    ) = plt.subplots(
        ncols=4, nrows=4, constrained_layout=True, figsize=(12, 10)
    )
    ax_rho_xy.set_xlabel(r"$x$")
    ax_rho_xy.set_ylabel(r"$y$")
    ax_rho_xy.set_title(r"$\rho$")
    ax_rho_yz.set_xlabel(r"$y$")
    ax_rho_yz.set_ylabel(r"$z$")
    ax_rho_yz.set_title(r"$\rho$")
    ax_e_xy.set_xlabel(r"$x$")
    ax_e_xy.set_ylabel(r"$y$")
    ax_e_xy.set_title(r"Energy density")
    ax_e_yz.set_xlabel(r"$y$")
    ax_e_yz.set_ylabel(r"$z$")
    ax_e_yz.set_title(r"Energy density")
    ax_vx_xy.set_xlabel(r"$x$")
    ax_vx_xy.set_ylabel(r"$y$")
    ax_vx_xy.set_title(r"$\rho v_x$")
    ax_vx_yz.set_xlabel(r"$y$")
    ax_vx_yz.set_ylabel(r"$z$")
    ax_vx_yz.set_title(r"$\rho v_x$")
    ax_vy_xy.set_xlabel(r"$x$")
    ax_vy_xy.set_ylabel(r"$y$")
    ax_vy_xy.set_title(r"$\rho v_y$")
    ax_vy_yz.set_xlabel(r"$y$")
    ax_vy_yz.set_ylabel(r"$z$")
    ax_vy_yz.set_title(r"$\rho v_y$")
    ax_vz_xy.set_xlabel(r"$x$")
    ax_vz_xy.set_ylabel(r"$y$")
    ax_vz_xy.set_title(r"$\rho v_z$")
    ax_vz_yz.set_xlabel(r"$y$")
    ax_vz_yz.set_ylabel(r"$z$")
    ax_vz_yz.set_title(r"$\rho v_z$")
    ax_bx_xy.set_xlabel(r"$x$")
    ax_bx_xy.set_ylabel(r"$y$")
    ax_bx_xy.set_title(r"$B_x$")
    ax_bx_yz.set_xlabel(r"$y$")
    ax_bx_yz.set_ylabel(r"$z$")
    ax_bx_yz.set_title(r"$B_x$")
    ax_by_xy.set_xlabel(r"$x$")
    ax_by_xy.set_ylabel(r"$y$")
    ax_by_xy.set_title(r"$B_y$")
    ax_by_yz.set_xlabel(r"$y$")
    ax_by_yz.set_ylabel(r"$z$")
    ax_by_yz.set_title(r"$B_y$")
    ax_bz_xy.set_xlabel(r"$x$")
    ax_bz_xy.set_ylabel(r"$y$")
    ax_bz_xy.set_title(r"$B_z$")
    ax_bz_yz.set_xlabel(r"$y$")
    ax_bz_yz.set_ylabel(r"$z$")
    ax_bz_yz.set_title(r"$B_z$")
    i0 = int(c.Mx / 2)  # midplane of the x-axis
    k0 = int(c.Mz / 2)  # midplane of the z-axis
    with tables.open_file(d.h5_filename, mode="r") as f:
    #     rho_xy = f.root.rho[:, :, :, k0]
    #     rho_yz = f.root.rho[:, i0, :, :]
    #     e_xy = f.root.e[:, :, :, k0]
    #     e_yz = f.root.e[:, i0, :, :]
    #     bx_xy = f.root.bx[:, :, :, k0]
    #     bx_yz = f.root.bx[:, i0, :, :]
    #     by_xy = f.root.by[:, :, :, k0]
    #     by_yz = f.root.by[:, i0, :, :]
    #     bz_xy = f.root.bz[:, :, :, k0]
    #     bz_yz = f.root.bz[:, i0, :, :]
    #     vx_xy = f.root.mx[:, :, :, k0]
    #     vx_yz = f.root.mx[:, i0, :, :]
    #     vy_xy = f.root.my[:, :, :, k0]
    #     vy_yz = f.root.my[:, i0, :, :]
    #     vz_xy = f.root.mz[:, :, :, k0]
    #     vz_yz = f.root.mz[:, i0, :, :]
    #     frames = [
    #         rho_xy,
    #         rho_yz,
    #         e_xy,
    #         e_yz,
    #         vx_xy,
    #         vx_yz,
    #         vy_xy,
    #         vy_yz,
    #         vz_xy,
    #         vz_yz,
    #         bx_xy,
    #         bx_yz,
    #         by_xy,
    #         by_yz,
    #         bz_xy,
    #         bz_yz,
    #     ]
    # im_rho_xy = ax_rho_xy.imshow(frames[0][0], origin="lower")
    # im_rho_yz = ax_rho_yz.imshow(frames[1][0], origin="lower")
    # cb_rho = fig.colorbar(im_rho_yz, ax=[ax_rho_xy, ax_rho_yz])
    # im_e_xy = ax_e_xy.imshow(frames[2][0], origin="lower")
    # im_e_yz = ax_e_yz.imshow(frames[3][0], origin="lower")
    # cb_e = fig.colorbar(im_e_yz, ax=[ax_e_xy, ax_e_yz])

    # def animate(n):
    #     rho_xy = frames[0][n]
    #     rho_yz = frames[0][n]
    #     vmax = np.max([rho_xy, rho_yz])
    #     vmin = np.min([rho_xy, rho_yz])
    #     im_rho_xy.set_data(rho_xy)
    #     im_rho_xy.set_clim(vmin, vmax)
    #     im_rho_yz.set_data(rho_yz)
    #     im_rho_yz.set_clim(vmin, vmax)

    # ani = animation.FuncAnimation(fig, animate, frames=len(frames[0]), interval=100)
        for n in range(f.root.rho.shape[0]):
        # for n in range(7, 8):

            rho_xy = ax_rho_xy.imshow(
                f.root.rho[n, :, :, k0], origin="lower", animated=True
            )
            rho_yz = ax_rho_yz.imshow(
                f.root.rho[n, i0, :, :], origin="lower", animated=True
            )
            vx_xy = ax_vx_xy.imshow(
                f.root.mx[n, :, :, k0], origin="lower", animated=True
            )
            vx_yz = ax_vx_yz.imshow(
                f.root.mx[n, i0, :, :], origin="lower", animated=True
            )
            vy_xy = ax_vy_xy.imshow(
                f.root.my[n, :, :, k0], origin="lower", animated=True
            )
            vy_yz = ax_vy_yz.imshow(
                f.root.my[n, i0, :, :], origin="lower", animated=True
            )
            vz_xy = ax_vz_xy.imshow(
                f.root.mz[n, :, :, k0], origin="lower", animated=True
            )
            vz_yz = ax_vz_yz.imshow(
                f.root.mz[n, i0, :, :], origin="lower", animated=True
            )
            bx_xy = ax_bx_xy.imshow(
                f.root.bx[n, :, :, k0], origin="lower", animated=True
            )
            bx_yz = ax_bx_yz.imshow(
                f.root.bx[n, i0, :, :], origin="lower", animated=True
            )
            by_xy = ax_by_xy.imshow(
                f.root.by[n, :, :, k0], origin="lower", animated=True
            )
            by_yz = ax_by_yz.imshow(
                f.root.by[n, i0, :, :], origin="lower", animated=True
            )
            bz_xy = ax_bz_xy.imshow(
                f.root.bz[n, :, :, k0], origin="lower", animated=True
            )
            bz_yz = ax_bz_yz.imshow(
                f.root.bz[n, i0, :, :], origin="lower", animated=True
            )
            e_xy = ax_e_xy.imshow(
                f.root.e[n, :, :, k0], origin="lower", animated=True
            )
            e_yz = ax_e_yz.imshow(
                f.root.e[n, i0, :, :], origin="lower", animated=True
            )
            frames.append(
                [
                    rho_xy,
                    rho_yz,
                    e_xy,
                    e_yz,
                    vx_xy,
                    vx_yz,
                    vy_xy,
                    vy_yz,
                    vz_xy,
                    vz_yz,
                    bx_xy,
                    bx_yz,
                    by_xy,
                    by_yz,
                    bz_xy,
                    bz_yz,
                ]
            )
    ani = animation.ArtistAnimation(
        fig, frames, interval=200, blit=True, repeat_delay=1000
    )
    fi
    plt.show()
