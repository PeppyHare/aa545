"""Various methods used to visualize the data generated by PicModel."""
import datetime
import os
from functools import partial
import math

from matplotlib import pyplot as plt
from matplotlib.animation import FuncAnimation
from matplotlib.animation import HTMLWriter
import numpy as np

from mhd1.models import MHDModel
from mhd1.utils import save_plot, create_folder


def plot_initial_distribution(m: MHDModel):
    """Plot initial configuration using pyplot."""
    c = m.c
    fig = plt.figure(figsize=(10, 10))
    fig.suptitle("Initial distribution")

    x = c.x_i
    y = c.y_j
    z = c.z_k
    i2 = int(c.Mx / 2)
    j2 = int(c.My / 2)
    k2 = int(c.Mz / 2)

    # Plot initial density distribution
    ax_rho_xy = fig.add_subplot(331)
    X, Y = np.meshgrid(x, y)
    Z = c.initial_Q[0, :, :, k2]
    ct = ax_rho_xy.contourf(X, Y, Z)
    ax_rho_xy.set_ylabel(r"$y$")
    ax_rho_xy.set_xlabel(r"$x$")
    plt.colorbar(ct, ax=ax_rho_xy)

    ax_rho_xz = fig.add_subplot(332)
    X, Y = np.meshgrid(x, z)
    Z = c.initial_Q[0, :, j2, :]
    ct = ax_rho_xz.contourf(X, Y, Z)
    ax_rho_xz.set_ylabel(r"$z$")
    ax_rho_xz.set_xlabel(r"$x$")
    plt.colorbar(ct, ax=ax_rho_xz)
    ax_rho_xz.set_title("Initial density")

    ax_rho_yz = fig.add_subplot(333)
    X, Y = np.meshgrid(y, z)
    Z = c.initial_Q[0, i2, :, :]
    ct = ax_rho_xz.contourf(X, Y, Z)
    ax_rho_yz.set_ylabel(r"$z$")
    ax_rho_yz.set_xlabel(r"$y$")
    plt.colorbar(ct, ax=ax_rho_yz)

    # Plot initial current distribution
    ax_p_xy = fig.add_subplot(334)
    X, Y = np.meshgrid(x, y)
    U = c.initial_Q[1, :, :, k2]
    V = c.initial_Q[2, :, :, k2]
    ax_p_xy.quiver(X, Y, U, V)
    ax_p_xy.set_xlabel(r"$x$")
    ax_p_xy.set_ylabel(r"$y$")

    ax_p_yz = fig.add_subplot(335)
    X, Y = np.meshgrid(y, z)
    U = c.initial_Q[2, i2, :, :]
    V = c.initial_Q[3, i2, :, :]
    ax_p_yz.streamplot(X, Y, U, V)
    ax_p_yz.set_xlabel(r"$y$")
    ax_p_yz.set_ylabel(r"$z$")
    ax_p_yz.set_title(r"Momentum")

    ax_p_xz = fig.add_subplot(336)
    X, Y = np.meshgrid(x, z)
    U = c.initial_Q[1, :, j2, :]
    V = c.initial_Q[3, :, j2, :]
    ax_p_xz.streamplot(X, Y, U, V)
    ax_p_xz.set_xlabel(r"$x$")
    ax_p_xz.set_ylabel(r"$z$")

    # Plot direction of initial magnetic field
    ax_b_xy = fig.add_subplot(337)
    X, Y = np.meshgrid(x, y)
    U = c.initial_Q[4, :, :, k2]
    V = c.initial_Q[5, :, :, k2]
    ax_b_xy.quiver(X, Y, U, V)
    ax_b_xy.set_xlabel(r"$x$")
    ax_b_xy.set_ylabel(r"$y$")

    ax_b_yz = fig.add_subplot(338)
    X, Y = np.meshgrid(y, z)
    U = c.initial_Q[5, i2, :, :]
    V = c.initial_Q[6, i2, :, :]
    ax_b_yz.streamplot(X, Y, U, V)
    ax_b_yz.set_xlabel(r"$y$")
    ax_b_yz.set_ylabel(r"$z$")
    ax_b_yz.set_title(r"$B_y$, $B_z$")

    ax_b_xz = fig.add_subplot(339)
    X, Y = np.meshgrid(x, z)
    U = c.initial_Q[4, :, j2, :]
    V = c.initial_Q[6, :, j2, :]
    ax_b_xz.streamplot(X, Y, U, V)
    ax_b_xz.set_xlabel(r"$x$")
    ax_b_xz.set_ylabel(r"$z$")
    plt.tight_layout()
    plt.show()
