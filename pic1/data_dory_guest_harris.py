"Calculate frequencies from completed calls to run_dory_guest_harris."

import os

import numpy as np
from scipy import stats
from matplotlib import pyplot as plt

from util import load_data, count_crossings, save_plot
import plots

# These classes are not used directly, but must be imported in order to unpack
# the pickled previous run data
from model import PicModel
from configuration import Configuration, ParticleData
from run_dgh import DGHConfiguration


def analyze_dgh(save_file, param):
    fn = os.path.join("saved_data", "dgh", save_file)
    m = load_data(fn)
    c = m.c
    d = m.d
    print(
        f"N: {c.N}, M: {c.M}, wp: {c.wp:.3f}, wc: {c.wc:.3f}, has_run:"
        f" {m.has_run}"
    )
    ax_energy = plots.plot_energy_history(
        m, plot_title=f"$k v_0 / \omega_c = {param}$", hold=False
    )
    t_steps = c.t_steps
    # ke_hist = d.ke_hist
    fe_hist = d.fe_hist
    time_axis = c.time_axis

    # Let's try to identify the linear region of exponential growth
    # First, how many decades do we grow over? Compare the first 5% to the last
    slice_width = int(t_steps / 20)
    min_avg = np.max(fe_hist[0:slice_width])
    max_avg = np.average(fe_hist[-slice_width:])
    llim = min_avg * 10
    ulim = max_avg / 2

    # Step over the growth of the field energy. If we go above 10x the max field
    # energy in the first 5%, then we are in the linear growth phase. When we
    # reach half of the saturation value, we leave the linear growth phase.
    t_start_idx = 0
    t_end_idx = t_steps - 1
    for idx in range(t_steps):
        if fe_hist[idx] > llim:
            t_start_idx = idx
            break
    for idx in range(t_steps):
        if fe_hist[idx] > ulim:
            t_end_idx = idx
            break
    t_start = t_start_idx * c.dt
    t_end = t_end_idx * c.dt
    print(f"Identified linear growth between t={t_start:.2f} and t={t_end:.2f}")

    time_axis = c.time_axis[t_start_idx:t_end_idx]
    fe_range = m.d.fe_hist[t_start_idx:t_end_idx]
    if fe_range.size > 0:
        lr = stats.linregress(time_axis, np.log(fe_range))
        ax_energy.plot(
            c.time_axis,
            np.exp(lr.slope * c.time_axis + lr.intercept),
            "r--",
            linewidth=0.5,
            label="fit",
        )
        print(f"Im(w/wc): {lr.slope / 2 / c.wc}")
        e_scaled = fe_range / np.exp(lr.slope * time_axis + lr.intercept)
        e_fft = np.real(np.fft.rfft(e_scaled))
        k_vec = np.fft.rfftfreq(len(e_scaled))
        topk = np.argpartition(e_fft, -4)[-4:]
        for idx in topk:
            print(
                f"k={k_vec[idx]}, fft[k]={e_fft[idx]},"
                f" w={2 * np.pi * k_vec[idx] / c.dt}"
            )
        w_re = (
            count_crossings(e_scaled)
            / 4
            / (c.n_periods * (t_end - t_start) / (c.t_max))
        )
        print(f"Re(w/wc): {w_re / c.wc}")
        plots.plot_snapshots_velocity_phase_space(
            m,
            hold=False,
            plot_title=(
                f"Velocity snapshots ($k v_\perp / \omega_c = {param}, \omega_p"
                " ^2 /\omega_c ^2 = 10$)"
            ),
        )
        save_plot(f"dgh_{param}.pdf")
        plt.show()
    else:
        print("No exponential growth detected.")
        plt.figure()
        e_fft = np.fft.rfft(d.fe_hist)
        k_vec = np.fft.rfftfreq(len(d.fe_hist))
        dw = 2 * np.pi / c.t_max
        n_t = d.fe_hist.size
        plt.plot(k_vec[:100] * n_t * dw, e_fft[:100] / c.wc, "-", label="Re(w)")
        plt.xlabel(r"$\omega / \omega_c$")
        plt.ylabel(r"$FFT(U_E)$")
        topk = np.argpartition(e_fft, -10)[-10:]
        for idx in topk:
            print(
                f"k={k_vec[idx]}, fft[k]={e_fft[idx]},"
                f" w={k_vec[idx] * n_t * dw}"
            )
        plt.show()


def compare_grid_spacing(files, labels):
    fig = plt.figure(figsize=(12, 6))
    ax_energy = fig.add_subplot(2, 1, (1, 2))
    ax_energy.set_title(r"DGH Instability - Grid Spacing Comparison")
    ax_energy.set_ylabel(r"$U_E$")
    ax_energy.set_xlabel("time")
    ax_energy.set_yscale("log")
    for idx in range(len(files)):
        fn = os.path.join("saved_data", "dgh", files[idx])
        m = load_data(fn)
        c = m.c
        d = m.d
        time_axis = c.time_axis
        fe_hist = d.fe_hist
        ax_energy.plot(time_axis, fe_hist, "-", markersize=1, label=labels[idx])
    ax_energy.legend(loc="lower right")
    plt.tight_layout()
    save_plot("dgh_grid_spacing_comparison.pdf")
    plt.show()


if __name__ == "__main__":
    # The filenames passed in refer to previous data runs generated by
    # run_dgh.py and  stored in ./saved_data/dgh
    analyze_dgh("4.10.p", 4.1)
    analyze_dgh("4.50_16_32.p", 4.5)
    analyze_dgh("5.0-5.p", 5.0)
    analyze_dgh("5.6.p", 5.6)
    analyze_dgh("6.0.p", 6.0)
    analyze_dgh("6.6.p", 6.6)
    compare_grid_spacing(
        ["4.50_16_32.p", "4.50_32_64.p", "4.50_64_128.p", "4.50_128_256.p"],
        ["16x32", "32x64", "64x128", "128x256"],
    )
